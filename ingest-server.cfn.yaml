AWSTemplateFormatVersion: '2010-09-09'
Description: gitgub.aaf.cloud/av/av
Parameters:

  IngestImage:
    Type: String
    Description: |
      Docker repository to pull image from.
    Default: 366539177289.dkr.ecr.us-west-1.amazonaws.com/ingest-server

  IngestCommand:
    Type: String
    Default: ingest-server --archive-storage file:archive --segment-storage file:segments --encoding {"video":{"bitrate":4000000,"codec":"h264","height":720,"width":1280}}  --platform-access-token=4c41c5c99f3fafd558f89b2816d7090ed2f1e674 --gameId=GlEzeE9Es9Z7O69Gdq52MiWelWG4 --platform-url=https://api.platform.dev.aaf.cloud
    Description: |
      Command to run in the container.

  IngestCPUs:
    Type: Number
    Default: 1024
    MinValue: 128
    MaxValue: 10240
    Description: |
      Number of cpu units to use for ingest server.

  IngestSSHPublicKey:
    Type: String
    Description: |
      Contents of public key to use for accepting tunnel connections
    Default: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDD6lurgNuTI7ElfAfo558C1dV2K3XsGMEiHR+V41oU0yXBi/43r9fiuXWQDgv2tpElP8swhbLgWr+AjdaDNFHxBNdH7K1dR1z6BHTHihGcP1FvWsdjjkI948ShZ/cfmrW90CU/MFITF8ZsaFF+40o/mYKaXQCptFh9/Fu8aTa4hiscGKZ47wVTz5Ie9h6urzhA6uT0hXC6//TWfpNfA8OLFW6YlQ6bpdsAT9VzIbdQbAIH4dyls9AeeU+CnJPYfwj8cKKThr6Aa5tRv26gVWWnoDaDYeReBxc66wxmC3TOAkFmgzfChMSchBSjkQOEj/nTKJfK1GwExP3+V6v3R3p9lJXGCe0LMRdbQbvuAcTQue0o9kaaQc3GmdNWw5tlqRxW7FTun57MKpiuGMD05FQ3US+jYslgfJnodd757IGlX0ioT2ojipuLwC+bkSK4miMKwlSx/NE6oBQgRCr37ifLtO1igt9fXUfKYM3/3MJekWcn91saSlIxBF3ST3CnCBVkHaZTAlePhKGirH/Yha+RuAhK1WLyCrq+w6gdfgE6WGnshO2+k8EAUaCrKNTTD0ANTicgImmnaBcX78V4+1I00bUpOkzsz7tO1YjOY3qcrbvkQpK7UxMiGEs+slfQlj+8wAuQn93Ll0PAajk2GbkBCJZG4qwFxKwSOh7+JxZf1Q== pawel@Pawels-MacBook-Pro.local

  PlatformEndpointServiceName:
    Type: String
    Description: |
      Service Name for platform. If none is provided an endpoint is not created.
    Default: com.amazonaws.vpce.us-east-1.vpce-svc-0a46fa157b78b183a

  SSHLocation:
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    Description: |
      IP address range that can establish an SSH tunnel.
      The narrower the better, but not strictly necessary.
      This would be the IP block of the venue where the connection in coming from.

Conditions:
  HasPlatformEndpoint:
    Fn::Not:
      - Fn::Equals:
        - !Ref PlatformEndpointServiceName
        - ''

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: HasPlatformEndpoint
    Properties:
      Name: aaf.cloud.
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: !Ref AWS::Region

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 192.168.1.0/24
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 192.168.2.0/24
      MapPublicIpOnLaunch: true

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: network

  LoadBalanceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - LoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: TCP
      Port: 22
      Protocol: TCP
      VpcId: !Ref VPC
      TargetType: ip

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalanceTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 22
      Protocol: TCP

  PlatformDevEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: HasPlatformEndpoint
    Properties:
      ServiceName: !Ref PlatformEndpointServiceName
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      VpcEndpointType: Interface
      SecurityGroupIds:
        - !Ref PlatformSecurityGroup

  PlatformDevRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: HasPlatformEndpoint
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: api.platform.dev.aaf.cloud
      ResourceRecords:
        - Fn::Select:
          - 1
          - Fn::Split:
            - ':'
            - Fn::Select:
              - 0
              - !GetAtt PlatformDevEndpoint.DnsEntries
      Type: CNAME
      TTL: 10

  ECSCluster:
    Type: AWS::ECS::Cluster

  SegmentStorage:
    Type: AWS::S3::Bucket

  FargateService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancer
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      TaskDefinition: !Ref IngestTaskDefinition
      DesiredCount: 2
      LoadBalancers:
        - ContainerName: IngestServer
          ContainerPort: 22
          TargetGroupArn: !Ref LoadBalanceTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2

  IngestTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: !Ref IngestCPUs
      Memory: 8GB
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref TaskExecutionRole
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: IngestServer
          Image: !Ref IngestImage
          Command:
            - !Ref IngestCommand
          PortMappings:
            - ContainerPort: 22
              HostPort: 22
          Environment:
            - Name: SSH_KEY
              Value: !Ref IngestSSHPublicKey
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref AWS::StackName

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound SSH
      VpcId: !Ref VPC
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation

  PlatformSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: HasPlatformEndpoint
    Properties:
      GroupDescription: Allow local port 443 inbound
      VpcId: !Ref VPC
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ServiceSecurityGroup